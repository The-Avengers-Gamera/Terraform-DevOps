pipeline {
    agent {
        label 'gcp_node'
    }

    environment {
        BUCKET = "gamera-terraform"
        ENV = "development"
    }

    stages {
        stage("Git checkout") {
            steps {
                //Get source code from project's terraform repository
                git branch: 'main',
                url: 'https://github.com/The-Avengers-Gamera/Terraform-DevOps.git'
            }
        }

        stage('Download .tfvars files') {
            steps {
                echo "Variable files downloading"

                sh "aws s3 cp s3://${BUCKET}/${ENV}/backend/terraform.tfvars ./applications/development/gamera-backend/terraform.tfvars"
                sh "aws s3 cp s3://${BUCKET}/${ENV}/frontend/terraform.tfvars ./applications/development/gamera-frontend/terraform.tfvars"
            }
        }
        
        stage("Provision infrastructure") {
            steps {
                //Provision the project's infrastructure
                echo 'Infrastructure provisioning'

                //Build docker image to be uploaded to ECR as default
                sh 'docker build -t default-image .'
                
                script {
                    parallel(
                        frontend: {
                            dir('applications/development/gamera-frontend') {
                                // Install provider and modules
                                sh 'terraform init'

                                // Provision the infrastructure in UAT environment
                                sh 'terraform apply -auto-approve'
                            }
                        },

                        backend: {
                            dir('applications/development/gamera-backend') {
                                // Install provider and modules
                                sh 'terraform init'

                                // Provision the backend infrastructure
                                sh 'terraform apply -auto-approve'
                            }
                        }
                    )
                }
            }
        }
    }
    
    post {
        always {
            // Clean the workspace after every pipeline build process
            echo 'Cleaning workspace'

            cleanWs()
            sh 'docker images default-image -q | xargs docker image rm -f'
        }

        failure {
            echo 'Build fail, sending error message for debugging'

            // Send error messages to DevOps engineer for debugging
            mail to: 'yyaug99@gmail.com',
            subject: "Pipeline build fails in: ${currentBuild.fullDisplayName}",
            body: "Build failed in ${env.BUILD_URL}"
        }
    }
}